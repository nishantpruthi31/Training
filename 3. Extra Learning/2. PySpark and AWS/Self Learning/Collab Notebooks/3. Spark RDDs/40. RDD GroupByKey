{"cells":[{"cell_type":"code","source":["%%capture\n","\n","!apt-get update\n","!apt-get install -y openjdk-8-jdk-headless -qq\n","!apt-get install maven -qq\n","\n","!curl -L \"https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz\" > spark-2.4.5-bin-hadoop2.7.tgz\n","!tar -xvf spark-2.4.5-bin-hadoop2.7.tgz\n","!pip install -q findspark\n","!pip install pyspark py4j\n","from pyspark.sql import SparkSession\n","from pyspark.sql.functions import when\n","from pyspark.sql import functions\n","from pyspark.sql.types import IntegerType\n","from pyspark.sql.functions import col\n","#from pyspark.sql.Column import isNull\n","from pyspark.sql.functions import lit\n","spark = SparkSession.builder.master(\"local[*]\").config(\"spark.driver.memory\", \"16g\").getOrCreate()"],"metadata":{"id":"VgLhn5ATVIKk","executionInfo":{"status":"ok","timestamp":1703230132410,"user_tz":-330,"elapsed":111404,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# GroupByKey is used to create groups based on Keys in RDD\n","# For groupByKey to work properly the data must be in the format of (k,v), (k,v), (k2,v), (k2,v2)\n","# Example: (“Apple”,1), (“Ball”,1), (“Apple”,1)\n","# It will create a new RDD\n","# rdd.groupByKey()\n","# mapValues(list) are usually used to get the group data\n","\n","# example if we have [(this , 1), (ant,2),(this(3))]\n","# and we apply group by key on it , we would get [(this , [1,3]),(ant,[2])]\n","\n","#but we need to use mapValues to access iteratble list\n","\n"],"metadata":{"id":"WrzX_u_eLz93","executionInfo":{"status":"ok","timestamp":1703232030720,"user_tz":-330,"elapsed":474,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["\n","from pyspark import SparkConf, SparkContext\n","conf = SparkConf().setAppName(\"Read File\")\n","sc = SparkContext.getOrCreate(conf=conf)   # we provide configuration\n"],"metadata":{"id":"8zB0OqJqUhAR","executionInfo":{"status":"ok","timestamp":1703230209333,"user_tz":-330,"elapsed":517,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["\n","rdd = sc.textFile('sample_words.txt')\n","rdd.collect()\n"],"metadata":{"id":"mFSA-Hh8WznA","executionInfo":{"status":"ok","timestamp":1703232253524,"user_tz":-330,"elapsed":471,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"af260d60-6d95-4178-b05b-cdb228944823"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['this mango company animal',\n"," 'cat dog ant mic laptop',\n"," 'chair switch mobile am charger cover',\n"," 'amanda any alarm ant']"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["\n","#rdd.map(lambda x:(x,len(x.split(\" \")))).collect() # this means we are converting every string with no of words in it.\n","rdd2=rdd.flatMap(lambda x:x.split(' ')).map(lambda x:(x,len(x)) )  # every word will have value 1"],"metadata":{"id":"AzJT8DnVXY23","executionInfo":{"status":"ok","timestamp":1703232684855,"user_tz":-330,"elapsed":518,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["rdd2.collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n26t9zBPdiJ6","executionInfo":{"status":"ok","timestamp":1703232702459,"user_tz":-330,"elapsed":524,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"outputId":"d941fb09-ba05-4832-85e2-6949198b7a19"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('this', 4),\n"," ('mango', 5),\n"," ('company', 7),\n"," ('animal', 6),\n"," ('cat', 3),\n"," ('dog', 3),\n"," ('ant', 3),\n"," ('mic', 3),\n"," ('laptop', 6),\n"," ('chair', 5),\n"," ('switch', 6),\n"," ('mobile', 6),\n"," ('am', 2),\n"," ('charger', 7),\n"," ('cover', 5),\n"," ('amanda', 6),\n"," ('any', 3),\n"," ('alarm', 5),\n"," ('ant', 3)]"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["rdd2.groupByKey().collect()   # here we will get a different value for list of each ellement which can be solved by below way"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WvYeeG2FhqRe","executionInfo":{"status":"ok","timestamp":1703233033627,"user_tz":-330,"elapsed":841,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"outputId":"e7d8c072-137c-4b67-efee-c1a6e55558a6"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('this', <pyspark.resultiterable.ResultIterable at 0x7e69eee8d0f0>),\n"," ('mango', <pyspark.resultiterable.ResultIterable at 0x7e69eee8ff40>),\n"," ('cat', <pyspark.resultiterable.ResultIterable at 0x7e69eee8f280>),\n"," ('ant', <pyspark.resultiterable.ResultIterable at 0x7e69eee8db70>),\n"," ('laptop', <pyspark.resultiterable.ResultIterable at 0x7e69eee8f6d0>),\n"," ('chair', <pyspark.resultiterable.ResultIterable at 0x7e69eee8cd60>),\n"," ('switch', <pyspark.resultiterable.ResultIterable at 0x7e69eee8e1a0>),\n"," ('mobile', <pyspark.resultiterable.ResultIterable at 0x7e69eee8f430>),\n"," ('am', <pyspark.resultiterable.ResultIterable at 0x7e69eee8fcd0>),\n"," ('company', <pyspark.resultiterable.ResultIterable at 0x7e69eee8d030>),\n"," ('animal', <pyspark.resultiterable.ResultIterable at 0x7e69eee8d4b0>),\n"," ('dog', <pyspark.resultiterable.ResultIterable at 0x7e69eee8ffd0>),\n"," ('mic', <pyspark.resultiterable.ResultIterable at 0x7e69eee8f6a0>),\n"," ('charger', <pyspark.resultiterable.ResultIterable at 0x7e69eee8f5e0>),\n"," ('cover', <pyspark.resultiterable.ResultIterable at 0x7e69eee8e3e0>),\n"," ('amanda', <pyspark.resultiterable.ResultIterable at 0x7e69eee8ebf0>),\n"," ('any', <pyspark.resultiterable.ResultIterable at 0x7e69eee8ded0>),\n"," ('alarm', <pyspark.resultiterable.ResultIterable at 0x7e69eee8e230>)]"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["rdd2.groupByKey().mapValues(list).collect()   # now we will get list values also"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a0k-Zl7MmY4w","executionInfo":{"status":"ok","timestamp":1703233099678,"user_tz":-330,"elapsed":831,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"outputId":"98c0edc8-40b3-4a5f-fc78-7ffa9d39851f"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('this', [4]),\n"," ('mango', [5]),\n"," ('cat', [3]),\n"," ('ant', [3, 3]),\n"," ('laptop', [6]),\n"," ('chair', [5]),\n"," ('switch', [6]),\n"," ('mobile', [6]),\n"," ('am', [2]),\n"," ('company', [7]),\n"," ('animal', [6]),\n"," ('dog', [3]),\n"," ('mic', [3]),\n"," ('charger', [7]),\n"," ('cover', [5]),\n"," ('amanda', [6]),\n"," ('any', [3]),\n"," ('alarm', [5])]"]},"metadata":{},"execution_count":23}]}],"metadata":{"colab":{"provenance":[{"file_id":"11YM-lleSvtN7VXzuep2XS63Vi7Wta6I6","timestamp":1703233116386},{"file_id":"1yaR5AnPIUKlGbxaBCFaqGOibqyzKSsaE","timestamp":1703061654276},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1703060626608}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}