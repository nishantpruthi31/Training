{"cells":[{"cell_type":"code","source":["%%capture\n","\n","!apt-get update\n","!apt-get install -y openjdk-8-jdk-headless -qq\n","!apt-get install maven -qq\n","\n","!curl -L \"https://archive.apache.org/dist/spark/spark-2.4.5/spark-2.4.5-bin-hadoop2.7.tgz\" > spark-2.4.5-bin-hadoop2.7.tgz\n","!tar -xvf spark-2.4.5-bin-hadoop2.7.tgz\n","!pip install -q findspark\n","!pip install pyspark py4j\n","from pyspark.sql import SparkSession\n","from pyspark.sql.functions import when\n","from pyspark.sql import functions\n","from pyspark.sql.types import IntegerType\n","from pyspark.sql.functions import col\n","#from pyspark.sql.Column import isNull\n","from pyspark.sql.functions import lit\n","spark = SparkSession.builder.master(\"local[*]\").config(\"spark.driver.memory\", \"16g\").getOrCreate()"],"metadata":{"id":"VgLhn5ATVIKk","executionInfo":{"status":"ok","timestamp":1703230132410,"user_tz":-330,"elapsed":111404,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["# ReduceByKey is used to combined data based on Keys in RDD\n","# For reduceByKey to work properly the data must be in the format of (k,v), (k,v), (k2,v), (k2,v2)\n","# Example: (“Apple”,1), (“Ball”,1), (“Apple”,1)\n","# It will create a new RDD\n","# rdd.reduceByKey(lambda x, y: x + y)\n","\n","\n","# example if we have [(this , 1), (ant,2),(this,3),(this,2)]\n","# and we apply reduce key on it , like lambda x,y:x+y i.e. for this\n","                        # 1+3 =4 , then 4 will be x and y will be 2\n","                        # 4 + 2 =6 , hence our final will be\n","                        # (this,6)\n","\n","\n"],"metadata":{"id":"WrzX_u_eLz93","executionInfo":{"status":"ok","timestamp":1703234587360,"user_tz":-330,"elapsed":426,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["\n","from pyspark import SparkConf, SparkContext\n","conf = SparkConf().setAppName(\"Read File\")\n","sc = SparkContext.getOrCreate(conf=conf)   # we provide configuration\n"],"metadata":{"id":"8zB0OqJqUhAR","executionInfo":{"status":"ok","timestamp":1703230209333,"user_tz":-330,"elapsed":517,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["\n","rdd = sc.textFile('Sample.txt')\n","rdd.collect()\n"],"metadata":{"id":"mFSA-Hh8WznA","executionInfo":{"status":"ok","timestamp":1703234614892,"user_tz":-330,"elapsed":785,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"c7bbf74b-e4bb-47b9-cb1e-ef7860757b9c"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['1 2 3 4 5', '3 4 5 66 77', '12 43 6 7 8', '12 12 33']"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["\n","#rdd.map(lambda x:(x,len(x.split(\" \")))).collect() # this means we are converting every string with no of words in it.\n","rdd2=rdd.flatMap(lambda x:x.split(' ')).map(lambda x:(x,1))   # every word will have value 1"],"metadata":{"id":"AzJT8DnVXY23","executionInfo":{"status":"ok","timestamp":1703234665422,"user_tz":-330,"elapsed":407,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["rdd2.collect()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n26t9zBPdiJ6","executionInfo":{"status":"ok","timestamp":1703234670028,"user_tz":-330,"elapsed":1133,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"outputId":"7d54e283-af6d-4559-b436-675048cdda3a"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('1', 1),\n"," ('2', 1),\n"," ('3', 1),\n"," ('4', 1),\n"," ('5', 1),\n"," ('3', 1),\n"," ('4', 1),\n"," ('5', 1),\n"," ('66', 1),\n"," ('77', 1),\n"," ('12', 1),\n"," ('43', 1),\n"," ('6', 1),\n"," ('7', 1),\n"," ('8', 1),\n"," ('12', 1),\n"," ('12', 1),\n"," ('33', 1)]"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["rdd2.reduceByKey(lambda x,y:x+y).collect()   # here we will get a different value for list of each ellement which can be solved by below way"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WvYeeG2FhqRe","executionInfo":{"status":"ok","timestamp":1703234753803,"user_tz":-330,"elapsed":1134,"user":{"displayName":"Nishant Pruthi","userId":"05492412063404871418"}},"outputId":"c84ddc18-5895-4f9f-9a38-85e5e984b356"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('1', 1),\n"," ('4', 2),\n"," ('66', 1),\n"," ('77', 1),\n"," ('12', 3),\n"," ('8', 1),\n"," ('33', 1),\n"," ('2', 1),\n"," ('3', 2),\n"," ('5', 2),\n"," ('43', 1),\n"," ('6', 1),\n"," ('7', 1)]"]},"metadata":{},"execution_count":28}]}],"metadata":{"colab":{"provenance":[{"file_id":"11YM-lleSvtN7VXzuep2XS63Vi7Wta6I6","timestamp":1703234818720},{"file_id":"1yaR5AnPIUKlGbxaBCFaqGOibqyzKSsaE","timestamp":1703061654276},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1703060626608}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}